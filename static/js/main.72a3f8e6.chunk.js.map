{"version":3,"sources":["components/Header.js","components/Post.js","components/Posts.js","components/FullPost.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Post","_ref","id","title","created","content","clicked","timeString","Date","toDateString","substring","onClick","Posts","handlePostClick","post","_this","props","history","push","pathname","state","_this2","this","posts","console","log","blogPosts","map","components_Post","key","React","Component","newProps","location","Link","to","axios","require","App","loading","get","then","response","setState","Object","entries","data","reverse","catch","err","_this3","BrowserRouter","components_Header","Switch","Route","exact","path","render","components_Posts","assign","FullPost","Boolean","window","hostname","match","ReactDOM","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72a3f8e6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"App-header\">\n            <div className=\"header\">\n                <div className=\"left-header\">\n                    <h2>Shane's Serverless Daily Dev Blog</h2>\n                </div>\n                <div className=\"right-header\">\n                    <button className=\"btn btn-primary\">Sign In</button>\n                </div>\n            </div>                \n            <p className=\"subtitle\"><em>This blog uses cloud functions and a cloud database instead of relying on a traditional back-end server and database</em></p>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nconst Post = ({ id, title, created, content, clicked }) => {\n\n    let timeString = new Date(created);\n    return (\n        <li>\n            <div className=\"post\">\n                <div className=\"post-inside\">\n                    <h3 className=\"post-title\">{title}</h3>\n                    <time className=\"post-date\">{timeString.toDateString()}</time>\n                    <p className=\"excerpt\">{content.substring(0, 150)}...</p>\n                    <p className=\"post-link\" onClick={clicked}>Read Post</p>\n                </div>\n            </div>\n        </li>\n    );\n}\n\nexport default Post;","import React from 'react';\nimport Post from './Post';\n\nclass Posts extends React.Component {\n\n    handlePostClick = (post) => {\n        this.props.history.push({\n            pathname: '/DevBlog/post/' + post[0], \n            state: {title: post[1].title, created: post[1].created, content: post[1].content}\n        })\n    }\n\n    render() {\n        const posts = this.props.posts;\n        console.log(posts);\n        const blogPosts = posts.map((post) => {\n            return <Post key={post[0]} id={post[0]} title={post[1].title} created={post[1].created} content={post[1].content} clicked={() => this.handlePostClick(post)} />\n        });\n\n        return (\n            <ul className=\"posts\">\n                {blogPosts}\n            </ul>\n        );\n    }\n}\n\nexport default Posts;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Posts extends React.Component {\n\n    render() {\n        const newProps = this.props.location.state;\n\n        let timeString = new Date(newProps.created);\n\n        return (\n            <div className=\"fullpost\">\n                <div className=\"fullpost-inside\">\n                    <h3 className=\"fullpost-title\">{newProps.title}</h3>\n                    <time className=\"fullpost-date\">{timeString.toDateString()}</time>\n                    <p className=\"fullpost-content\">{newProps.content}</p>\n                    <Link className=\"backButton\" to=\"/DevBlog\">Back</Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../components/Header';\nimport Posts from '../components/Posts';\nimport FullPost from '../components/FullPost';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nconst axios = require('axios');\n\nclass App extends Component {\n\n  state = {\n    posts: null,\n    loading: true\n  }\n\n  componentDidMount() {\n    axios.get('https://us-central1-exampleblog-538df.cloudfunctions.net/posts')\n    // axios.get('http://localhost:5000/exampleblog-538df/us-central1/posts')\n      .then((response) => {\n        this.setState({ posts: Object.entries(response.data).reverse(), loading: false });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Header />\n          {this.state.loading ? <h1>Loading...</h1> :\n            <Switch>\n              <Route exact path=\"/DevBlog\" render={props => <Posts {...props} posts={this.state.posts} />} />\n              <Route exact path=\"/DevBlog/post/:id\" render={props => <FullPost {...props} />} />\n              <Route render={() => {\n                return <p><strong>Page Not Found</strong></p>\n              }} />\n            </Switch>\n          }\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}