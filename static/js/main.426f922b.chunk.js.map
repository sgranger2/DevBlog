{"version":3,"sources":["components/Header.js","components/Post.js","components/Posts.js","components/FullPost.js","components/Firebase/constants.js","components/NewPost.js","containers/App.js","components/Firebase/auth.js","serviceWorker.js","index.js"],"names":["Header","props","isSignedIn","signedIn","react_default","a","createElement","className","onClick","newPostClicked","adminClicked","Post","_ref","id","title","created","content","clicked","timeString","Date","toDateString","substring","Posts","handlePostClick","post","_this","history","push","pathname","state","_this2","this","blogPosts","posts","map","components_Post","key","React","Component","newProps","location","Link","to","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","googleProvider","auth","GoogleAuthProvider","firebaseAuth","axios","database","firestore","settings","timestampsInSnapshots","require","NewPost","token","handleTitleChange","event","setState","target","value","handleContentChange","handleSubmit","preventDefault","currentUser","getIdToken","then","onSubmit","type","onChange","App","loading","handleGoogleSignIn","signInWithPopup","result","console","log","handleNewPost","get","response","Object","entries","data","reverse","catch","err","_this3","components_Header","Switch","Route","exact","path","render","components_Posts","assign","FullPost","component","Boolean","window","hostname","match","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAqBeA,eAnBA,SAACC,GACZ,IAAIC,EAAaD,EAAME,SACvB,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,gDAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVL,EACDE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASP,EAAMQ,gBAAnD,YACAL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASP,EAAMS,cAAnD,WAGRN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,sICGrBK,EAjBF,SAAAC,GAA8CA,EAA3CC,GAA2C,IAAvCC,EAAuCF,EAAvCE,MAAOC,EAAgCH,EAAhCG,QAASC,EAAuBJ,EAAvBI,QAASC,EAAcL,EAAdK,QAErCC,EAAa,IAAIC,KAAKJ,GAC1B,OACIX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcO,GAC5BV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaW,EAAWE,gBACxChB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWS,EAAQK,UAAU,EAAG,KAA7C,OACAjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYC,QAASS,GAAlC,iBCcLK,6MArBXC,gBAAkB,SAACC,GACfC,EAAKxB,MAAMyB,QAAQC,KAAK,CACpBC,SAAU,iBAAmBJ,EAAK,GAClCK,MAAO,CAACf,MAAOU,EAAK,GAAGV,MAAOC,QAASS,EAAK,GAAGT,QAASC,QAASQ,EAAK,GAAGR,oFAIxE,IAAAc,EAAAC,KAECC,EADQD,KAAK9B,MAAMgC,MACDC,IAAI,SAACV,GACzB,OAAOpB,EAAAC,EAAAC,cAAC6B,EAAD,CAAMC,IAAKZ,EAAK,GAAIX,GAAIW,EAAK,GAAIV,MAAOU,EAAK,GAAGV,MAAOC,QAASS,EAAK,GAAGT,QAASC,QAASQ,EAAK,GAAGR,QAASC,QAAS,kBAAMa,EAAKP,gBAAgBC,QAG1J,OACIpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACTyB,UAjBGK,IAAMC,mBCoBXhB,mLAjBP,IAAMiB,EAAWR,KAAK9B,MAAMuC,SAASX,MAEjCX,EAAa,IAAIC,KAAKoB,EAASxB,SAEnC,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBgC,EAASzB,OACzCV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBW,EAAWE,gBAC5ChB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBgC,EAASvB,SAC1CZ,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAMlC,UAAU,aAAamC,GAAG,YAAhC,iBAbAL,IAAMC,8CCW1BK,IAASC,cATM,CACXC,OAAQC,0CACRC,WAAYD,oCACZE,YAAaF,2CACbG,UAAWH,oBACXI,cAAeJ,gCACfK,kBAAmBL,iBAKhB,IAAMM,EAAiB,IAAIT,IAASU,KAAKC,mBACnCC,EAAeZ,IAASU,KCd/BG,GDekBb,IAASc,WACfd,IAASe,YAAYC,SAAS,CAAEC,uBAAuB,IChB3DC,EAAQ,KAsDPC,6MAlDXjC,MAAQ,CACJf,MAAO,GACPE,QAAS,GACT+C,MAAO,MASXC,kBAAoB,SAACC,GACjBxC,EAAKyC,SAAS,CAACpD,MAAOmD,EAAME,OAAOC,WAGvCC,oBAAsB,SAACJ,GACnBxC,EAAKyC,SAAS,CAAClD,QAASiD,EAAME,OAAOC,WAGzCE,aAAe,SAACL,GACZA,EAAMM,iBACNf,EAAMhC,KAAK,iEAAkE,CACzEV,MAAOW,EAAKI,MAAMf,MAClBE,QAASS,EAAKI,MAAMb,QACpB+C,MAAOtC,EAAKI,MAAMkC,QAGtBtC,EAAKxB,MAAMyB,QAAQC,KAAK,CACpBC,SAAU,iGAvBE,IAAAE,EAAAC,KAChBwB,IAAeiB,YAAYC,aAAaC,KAAK,SAACX,GAC1CjC,EAAKoC,SAAS,CAACH,MAAOA,uCA0B1B,OACI3D,EAAAC,EAAAC,cAAA,QAAMqE,SAAU5C,KAAKuC,cACrBlE,EAAAC,EAAAC,cAAA,sBAEIF,EAAAC,EAAAC,cAAA,SAAOsE,KAAK,OAAOC,SAAU9C,KAAKiC,qBAEpC5D,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,YAAU8D,MAAOrC,KAAKF,MAAMuC,MAAOS,SAAU9C,KAAKsC,uBAEpDjE,EAAAC,EAAAC,cAAA,SAAOsE,KAAK,SAASR,MAAM,mBA9CnB/B,IAAMC,2BCI5B,IAAMkB,EAAQK,EAAQ,IAuDPiB,6MAnDbjD,MAAQ,CACNI,MAAO,KACP8C,SAAS,EACT5E,UAAU,KAcZ6E,mBAAqB,WC3BfzB,IAAe0B,gBAAgB7B,GAAgBsB,KAAK,SAACQ,GACzD,OAAOA,ID2BWR,KAAK,SAAAQ,GACrBC,QAAQC,IAAIF,GACZzD,EAAKyC,SAAS,CAAE/D,UAAU,SAI9BkF,cAAgB,WACd5D,EAAKxB,MAAMyB,QAAQC,KAAK,CACtBC,SAAU,yGApBM,IAAAE,EAAAC,KAClByB,EAAM8B,IAAI,kEAEPZ,KAAK,SAACa,GACLzD,EAAKoC,SAAS,CAAEjC,MAAOuD,OAAOC,QAAQF,EAASG,MAAMC,UAAWZ,SAAS,MAE1Ea,MAAM,SAACC,GACNV,QAAQC,IAAIS,sCAiBT,IAAAC,EAAA/D,KACP,OAEI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyF,EAAD,CAAQ5F,SAAU4B,KAAKF,MAAM1B,SAAUO,aAAcqB,KAAKiD,mBAAoBvE,eAAgBsB,KAAKsD,gBAClGtD,KAAKF,MAAMkD,QAAU3E,EAAAC,EAAAC,cAAA,wBACpBF,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,KACE5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,OAAQ,SAAAnG,GAAK,OAAIG,EAAAC,EAAAC,cAAC+F,EAADb,OAAAc,OAAA,GAAWrG,EAAX,CAAkBgC,MAAO6D,EAAKjE,MAAMI,YAClF7B,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,OAAQ,SAAAnG,GAAK,OAAIG,EAAAC,EAAAC,cAACiG,EAAatG,MACrEG,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,mBAAmBK,UAAW1C,IAChD1D,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAOG,OAAQ,WACb,OAAOhG,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6CA3CRgC,aECEmE,QACW,cAA7BC,OAAOlE,SAASmE,UAEe,UAA7BD,OAAOlE,SAASmE,UAEhBD,OAAOlE,SAASmE,SAASC,MACvB,uECXNC,IAAST,OACDhG,EAAAC,EAAAC,cAACwG,EAAA,EAAD,KACQ1G,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAOE,KAAK,IAAIK,UAAW1B,KACjBiC,SAASC,eAAe,SDuH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.426f922b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    let isSignedIn = props.signedIn;\n    return (\n        <header className=\"App-header\">\n            <div className=\"header\">\n                <div className=\"left-header\">\n                    <h2>Shane's Serverless Daily Dev Blog</h2>\n                </div>\n                <div className=\"right-header\">\n                    {isSignedIn ? \n                    <button className=\"btn btn-primary\" onClick={props.newPostClicked}>New Post</button> : \n                    <button className=\"btn btn-primary\" onClick={props.adminClicked}>Admin</button>}     \n                </div>\n            </div>                \n            <p className=\"subtitle\"><em>This blog uses cloud functions and a cloud database instead of relying on a traditional back-end server and database</em></p>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nconst Post = ({ id, title, created, content, clicked }) => {\n\n    let timeString = new Date(created);\n    return (\n        <li>\n            <div className=\"post\">\n                <div className=\"post-inside\">\n                    <h3 className=\"post-title\">{title}</h3>\n                    <time className=\"post-date\">{timeString.toDateString()}</time>\n                    <p className=\"excerpt\">{content.substring(0, 150)}...</p>\n                    <p className=\"post-link\" onClick={clicked}>Read Post</p>\n                </div>\n            </div>\n        </li>\n    );\n}\n\nexport default Post;","import React from 'react';\nimport Post from './Post';\n\nclass Posts extends React.Component {\n\n    handlePostClick = (post) => {\n        this.props.history.push({\n            pathname: '/DevBlog/post/' + post[0], \n            state: {title: post[1].title, created: post[1].created, content: post[1].content}\n        })\n    }\n\n    render() {\n        const posts = this.props.posts;\n        const blogPosts = posts.map((post) => {\n            return <Post key={post[0]} id={post[0]} title={post[1].title} created={post[1].created} content={post[1].content} clicked={() => this.handlePostClick(post)} />\n        });\n\n        return (\n            <ul className=\"posts\">\n                {blogPosts}\n            </ul>\n        );\n    }\n}\n\nexport default Posts;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Posts extends React.Component {\n\n    render() {\n        const newProps = this.props.location.state;\n\n        let timeString = new Date(newProps.created);\n\n        return (\n            <div className=\"fullpost\">\n                <div className=\"fullpost-inside\">\n                    <h3 className=\"fullpost-title\">{newProps.title}</h3>\n                    <time className=\"fullpost-date\">{timeString.toDateString()}</time>\n                    <p className=\"fullpost-content\">{newProps.content}</p>\n                    <Link className=\"backButton\" to=\"/DevBlog\">Back</Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Posts;","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nfirebase.initializeApp(config);\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\nexport const firebaseAuth = firebase.auth;\nexport const database = firebase.database();\nexport const db = firebase.firestore().settings({ timestampsInSnapshots: true });","import React from 'react';\nimport {firebaseAuth} from './Firebase/constants';\n\nconst axios = require('axios');\n\nclass NewPost extends React.Component {\n\n    state = {\n        title: \"\",\n        content: \"\",\n        token: \"\"\n    }\n\n    componentDidMount() {\n        firebaseAuth().currentUser.getIdToken().then((token) => {\n            this.setState({token: token})\n        })\n    }\n\n    handleTitleChange = (event) => {\n        this.setState({title: event.target.value})\n    }\n\n    handleContentChange = (event) => {\n        this.setState({content: event.target.value})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        axios.post('https://us-central1-exampleblog-538df.cloudfunctions.net/posts', {\n            title: this.state.title,\n            content: this.state.content,\n            token: this.state.token\n        });\n        // window.location.reload();\n        this.props.history.push({\n            pathname: '/DevBlog'\n        });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n            <label>\n                Title:\n                <input type=\"text\" onChange={this.handleTitleChange}/>\n            </label>\n              <label>\n                Content:\n                <textarea value={this.state.value} onChange={this.handleContentChange} />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n            </form>\n          );\n    }\n}\n\nexport default NewPost;","import React, { Component } from 'react';\nimport './App.css';\nimport '../queries.css';\nimport Header from '../components/Header';\nimport Posts from '../components/Posts';\nimport FullPost from '../components/FullPost';\nimport NewPost from '../components/NewPost';\nimport {Route, Switch } from 'react-router-dom';\nimport { loginWithGoogle } from '../components/Firebase/auth';\nconst axios = require('axios');\n\nclass App extends Component {\n\n  state = {\n    posts: null,\n    loading: true,\n    signedIn: false\n  }\n\n  componentDidMount() {\n    axios.get('https://us-central1-exampleblog-538df.cloudfunctions.net/posts')\n    // axios.get('http://localhost:5000/exampleblog-538df/us-central1/posts')\n      .then((response) => {\n        this.setState({ posts: Object.entries(response.data).reverse(), loading: false });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleGoogleSignIn = () => {\n    loginWithGoogle().then(result => {\n      console.log(result);\n      this.setState({ signedIn: true });\n    });\n  }\n\n  handleNewPost = () => {\n    this.props.history.push({\n      pathname: '/DevBlog/newPost'\n    })\n  }\n\n  render() {\n    return (\n      \n        <div className=\"App\">\n          <Header signedIn={this.state.signedIn} adminClicked={this.handleGoogleSignIn} newPostClicked={this.handleNewPost} />\n          {this.state.loading ? <h1>Loading...</h1> :\n            <Switch>\n              <Route exact path=\"/DevBlog\" render={props => <Posts {...props} posts={this.state.posts} />} />\n              <Route exact path=\"/DevBlog/post/:id\" render={props => <FullPost {...props} />} />\n              <Route exact path=\"/DevBlog/newpost\" component={NewPost} />\n              <Route render={() => {\n                return <p><strong>Page Not Found</strong></p>\n              }} />\n            </Switch>\n          }\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","import { firebaseAuth, googleProvider } from './constants';\n\nexport function loginWithGoogle() {\n return firebaseAuth().signInWithPopup(googleProvider).then((result) => {\n    return result;\n });\n}\n\nexport function logout() {\n return firebaseAuth().signOut();\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render(\n        <BrowserRouter>\n                <Route path=\"/\" component={App} />\n        </BrowserRouter>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}